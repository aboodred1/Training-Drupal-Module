<?php
/**
 * @file
 * Code for the MS1TO1 Training module.
 */
 
/**
 * Implements hook_init().
 */
function ms1to1_training_init() {
  
  if(arg(0) == 'training') {
    // Include Ctools files
    ctools_include('ajax');
    ctools_include('modal');

    // Add Ctools' JavaScript to the page.
    ctools_modal_add_js();

    // User training status field 
    $account = user_load($GLOBALS['user']->uid);
    $account_wrapper = entity_metadata_wrapper('user', $account);

    $training_settings = array(
      'jplayer-training' => array(
        'swfPath' => base_path() . variable_get('jplayer_directory', 'sites/all/libraries/jplayer'),
      ),
      'ctools-training' => array(
        'modalSize' => array(
          'type' => 'fixed',
          'width' => 800,
          'height' => 631,
          'contentRight' => 0,
          'contentBottom' => 0,
        ),
        'modalOptions' => array(
          'opacity' => .8,
          'background-color' => '#000',
        ),
        'animation' => 'fadeIn',
        'modalTheme' => 'CToolsTrainingModal',
      ),
      'user-training' => array(
        'trainingStatus' => $account_wrapper->user_training->value(),
      ),
    );

    drupal_add_js($training_settings, 'setting');

    //add css files
    drupal_add_css(drupal_get_path('module', 'ms1to1_training') . '/css/ms1to1_training.css');
    //load js files
    drupal_add_js(url(variable_get('jplayer_directory', 'sites/all/libraries/jplayer') . '/jquery.jplayer.min.js', array('absolute' => TRUE)));
    drupal_add_js(url(variable_get('jplayer_directory', 'sites/all/libraries/jplayer') . '/jplayer.playlist.min.js', array('absolute' => TRUE)));
    drupal_add_js(drupal_get_path('module', 'ms1to1_training') . '/js/ms1to1_training.js');
  }
}

/**
 * Implements hook_menu().
 */
function ms1to1_training_menu() {
  $items = array();
  
  $items['training/%ctools_js/module/%'] = array(
    'title' => 'Module title',
    'page callback' => 'ms1to1_training_module_view',
    'page arguments' => array(1, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['training/ajax/users/topics'] = array(
    'title' => 'Javascript ajax Callback',
    'page callback' => 'ms1to1_training_ajax_users_progress',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['training/ajax/users/modules'] = array(
    'title' => 'Javascript ajax Callback',
    'page callback' => 'ms1to1_training_ajax_users_modules_progress',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

function ms1to1_training_module_view($js = NULL, $module_id) {
  
  if(!is_numeric($module_id)) {
    return drupal_access_denied();
  }  
  
  $matches = array();
  //All associated topics 
  $query = db_select('node', 'n')
           ->fields('n', array('nid', 'title'))
		   ->condition('n.status', '1')
		   ->condition('n.type', 'topic', 'LIKE');
  //audio field
  $query->leftJoin('field_data_field_audio', 'field_audio', 'n.nid = field_audio.entity_id');
  $query->condition('field_audio.entity_type', 'node')
        ->condition('field_audio.bundle', 'topic');
  $query->leftJoin('file_managed', 'a', 'field_audio.field_audio_fid = a.fid');
  $query->condition('a.status', '1');
  $query->addField('a', 'uri', 'uri_audio');
  // image field
  $query->leftJoin('field_data_field_image', 'field_image', 'n.nid = field_image.entity_id');
  $query->condition('field_image.entity_type', 'node')
        ->condition('field_image.bundle', 'topic');
  $query->leftJoin('file_managed', 'i', 'field_image.field_image_fid = i.fid');
  $query->condition('i.status', '1');
  $query->addField('i', 'uri', 'uri_image');
  //module field
  $query->leftJoin('field_data_topic_module', 'topic_module', 'n.nid = topic_module.entity_id');
  $query->condition('topic_module.entity_type', 'node')
        ->condition('topic_module.bundle', 'topic')
		->condition('topic_module.topic_module_nid', $module_id);
  //user_topic relation
  $query->leftJoin('users_training_topics', 'ut', 'n.nid = ut.nid and ut.uid = :uid', array(':uid' => $GLOBALS['user']->uid));
  $query->addField('ut', 'status', 'topic_status');
  $query->addField('ut', 'uid');

  $result =  $query->execute();       

  //mp3file class
  if (file_exists('sites/all/libraries/mp3file/mp3file.inc')) {
    require_once('sites/all/libraries/mp3file/mp3file.inc');
  }
  
  // Save the query to matches.
  foreach ($result as $row) {
    //$matches[$row->nid] = $row;
    $matches[$row->nid]['tid'] = $row->nid;
    $matches[$row->nid]['uid'] = $GLOBALS['user']->uid;
    $matches[$row->nid]['mid'] = $module_id;
    $matches[$row->nid]['title'] = $row->title;
    //$audio_url = url(str_replace('private:/', variable_get('file_private_path', 'sites/default/private'), $row->uri_audio), array('absolute' => TRUE));
    $matches[$row->nid]['mp3'] = file_create_url($row->uri_audio);

    $duration = '0:00';

    if(class_exists('mp3file')) {
      $audio_realpath = drupal_realpath($row->uri_audio);
      if(file_exists($audio_realpath)) {
        $mp3 = new mp3file($audio_realpath);
        $mp3_meta = $mp3->get_metadata();
        if ($mp3_meta['Encoding']=='Unknown') {
          $duration = '0:00';
        } else if ($mp3_meta['Encoding']=='VBR') {
          $duration = $mp3_meta['Length mm:ss'];
        } else if ($mp3_meta['Encoding']=='CBR') {
          $duration = $mp3_meta['Length mm:ss'];
        }
      }
    }

    $matches[$row->nid]['duration'] = $duration;
    $matches[$row->nid]['status'] = $row->topic_status;
    $matches[$row->nid]['poster'] = file_create_url($row->uri_image);
  }
  $json_topics = drupal_json_encode(array_values($matches));
  
  $modal_title = 'loading...';
  $modal_content = 'loading...';
  
  //load module node object 
  $module = node_load($module_id);
  
  
  //$modal_content = print_r($module->field_image, true);
  if($module_image = $module->field_image) {
    $modal_content = theme('image', array(
      'path' => $module_image['und'][0]['uri'],
      'alt' => ($module_image['und'][0]['alt'])? $module_image['und'][0]['alt'] : $module->title,
      'title' => ($module_image['und'][0]['title'])? $module_image['und'][0]['title'] : $module->title,
      'width' => $module_image['und'][0]['width'],
      'height' => $module_image['und'][0]['height'],
      'attributes' => array(
        'style' => 'display: block;',
      ),
    ));
  }
  
  $output = theme('ms1to1_training_modal', array('module_title' => $module->title, 'topic_view' => $modal_content));
  
  if($js) {
    ctools_include('ajax');
    ctools_include('modal');

    $commands = array();
    $commands[] = ctools_modal_command_display($modal_title, $output);
    $commands[] = ajax_command_invoke('body', 'addClass', array('training-modal'));
    $commands[] = ajax_command_invoke(NULL, 'afterTrainingModuleLoad', array($json_topics));

    //last topic user stop at or first topic if user have't started yet
    $commands[] = ajax_command_invoke('.view-display-id-embed_2 .views-row-1 a', 'click');
    print ajax_render($commands);
    exit;
  }

  return array('markup' => array('#markup' => $output));
}

function ms1to1_training_ajax_users_progress() {

  if($_POST) {
  
    $nid = (isset($_POST['nid']))? $_POST['nid'] : FALSE;
  
    //check if node and user ids available before add new recored.
    $query = db_select('users_training_topics', 'ut')
             ->fields('ut')
             ->condition('nid', $nid)
             ->condition('uid', $GLOBALS['user']->uid);
    $result = $query->execute()->fetchAssoc();
  
    if(!$result) {
      //insert new recored
      db_insert('users_training_topics')
      ->fields(array(
        'nid' => $nid,
        'uid' => $GLOBALS['user']->uid,
        'status' => 'completed',
      ))
      ->execute();
    }
  }  
  
  exit();
}

function ms1to1_training_ajax_users_modules_progress() {
  
  if($_POST) {
  
    $nid = (isset($_POST['nid']))? $_POST['nid'] : FALSE;
    $title = (isset($_POST['title']))? $_POST['title'] : '';
  
    //check if node and user ids available before add new recored.
    $query = db_select('users_training_modules', 'um')
             ->fields('um')
             ->condition('nid', $nid)
             ->condition('uid', $GLOBALS['user']->uid);
    $result = $query->execute()->fetchAssoc();
  
    if(!$result) {
      //insert new recored
      db_insert('users_training_modules')
      ->fields(array(
        'nid' => $nid,
        'uid' => $GLOBALS['user']->uid,
        'status' => 'completed',
      ))
      ->execute();

      //update Training Status field
      $account = user_load($GLOBALS['user']->uid);
      //helper object 
      $account_wrapper = entity_metadata_wrapper('user', $account);
      //retrieve data
      $user_training =  drupal_json_decode($account_wrapper->user_training->value());
      //add new data
      $user_training[$title] = 'completed';
      //save entire data
      $account_wrapper->user_training = drupal_json_encode($user_training); 
      $account_wrapper->save();
    }
  }

  exit();
}


/**
 * Implements hook_theme().
 */
function ms1to1_training_theme() {
  return array(
    'ms1to1_training_modal' => array(
      /*'render element' => 'elements',*/
      'variables' => array(
        'module_title' => NULL,
        'topic_view' => NULL,
      ),
      'template' => 'ms1to1-training-modal',
    ),
  );
}

/**
 * Implements hook_rules_action_info_alter()
 */
function ms1to1_training_rules_action_info_alter(&$actions) {

  $actions['drupal_message']['parameter']['type']['options list'] = 'ms1to1_training_drupal_message_types';
}

function ms1to1_training_drupal_message_types() {
  return array(
    'status' => t('Status'),
    'warning' => t('Warning'),
    'error' => t('Error'),
    'training-status' => t('Training Status'),
  );
}

/**
 * Implements hook_user_delete()
 */
function ms1to1_training_user_delete($account) {
  db_delete('users_training_topics')->condition('uid', $account->uid)->execute();
  db_delete('users_training_modules')->condition('uid', $account->uid)->execute();
}